{"ast":null,"code":"var _jsxFileName = \"/home/cedcoss/mark01/A-React Work/01_firstReactApp/81_chatServer/chat-server/src/Auth/SignIn.tsx\";\nimport React from 'react';\nimport { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { auth } from '../firebaseConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignIn = () => {\n  const provider = new GoogleAuthProvider();\n  signInWithPopup(auth, provider).then(result => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credentia.accessToken;\n    // The signed-in user info.\n    const user = result.user;\n    // ...\n  }).catch(error => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"btn btn-warning\",\n    children: \"Sign In With Google\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_c = SignIn;\nexport default SignIn;\nvar _c;\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"names":["React","GoogleAuthProvider","signInWithPopup","auth","SignIn","provider","then","result","credential","credentialFromResult","token","credentia","accessToken","user","catch","error","errorCode","code","errorMessage","message","email","customData","credentialFromError"],"sources":["/home/cedcoss/mark01/A-React Work/01_firstReactApp/81_chatServer/chat-server/src/Auth/SignIn.tsx"],"sourcesContent":["import React from 'react'\nimport { GoogleAuthProvider, signInWithPopup } from 'firebase/auth';\nimport { auth } from '../firebaseConfig';\nconst SignIn = () => {\n  const provider = new GoogleAuthProvider();\n  signInWithPopup(auth, provider)\n  .then((result) => {\n    // This gives you a Google Access Token. You can use it to access the Google API.\n    const credential = GoogleAuthProvider.credentialFromResult(result);\n    const token = credentia.accessToken;\n    // The signed-in user info.\n    const user = result.user;\n    // ...\n  }).catch((error) => {\n    // Handle Errors here.\n    const errorCode = error.code;\n    const errorMessage = error.message;\n    // The email of the user's account used.\n    const email = error.customData.email;\n    // The AuthCredential type that was used.\n    const credential = GoogleAuthProvider.credentialFromError(error);\n    // ...\n  });\n  return (\n    <button className=\"btn btn-warning\">Sign In With Google</button>\n  )\n}\n\nexport default SignIn"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,kBAAkB,EAAEC,eAAe,QAAQ,eAAe;AACnE,SAASC,IAAI,QAAQ,mBAAmB;AAAC;AACzC,MAAMC,MAAM,GAAG,MAAM;EACnB,MAAMC,QAAQ,GAAG,IAAIJ,kBAAkB,EAAE;EACzCC,eAAe,CAACC,IAAI,EAAEE,QAAQ,CAAC,CAC9BC,IAAI,CAAEC,MAAM,IAAK;IAChB;IACA,MAAMC,UAAU,GAAGP,kBAAkB,CAACQ,oBAAoB,CAACF,MAAM,CAAC;IAClE,MAAMG,KAAK,GAAGC,SAAS,CAACC,WAAW;IACnC;IACA,MAAMC,IAAI,GAAGN,MAAM,CAACM,IAAI;IACxB;EACF,CAAC,CAAC,CAACC,KAAK,CAAEC,KAAK,IAAK;IAClB;IACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,IAAI;IAC5B,MAAMC,YAAY,GAAGH,KAAK,CAACI,OAAO;IAClC;IACA,MAAMC,KAAK,GAAGL,KAAK,CAACM,UAAU,CAACD,KAAK;IACpC;IACA,MAAMZ,UAAU,GAAGP,kBAAkB,CAACqB,mBAAmB,CAACP,KAAK,CAAC;IAChE;EACF,CAAC,CAAC;;EACF,oBACE;IAAQ,SAAS,EAAC,iBAAiB;IAAA,UAAC;EAAmB;IAAA;IAAA;IAAA;EAAA,QAAS;AAEpE,CAAC;AAAA,KAvBKX,MAAM;AAyBZ,eAAeA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}